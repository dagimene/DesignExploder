

/*
 * Created on Fri Sep 17 14:59:59 ART 2010
 *
 * Generated by GEMS 
 */
 
package org.gems.test.deployment.deployment;

import java.util.List;


import org.eclipse.gmt.gems.metamodel.gen.AttributeInfo;
import org.eclipse.gmt.gems.model.AttributeValidator;
import org.eclipse.gmt.gems.ModelProvider;
import org.eclipse.gmt.gems.ModelRepository;
import org.eclipse.gmt.gems.model.Visitor;
import org.eclipse.gmt.gems.model.ConnectionType;
import org.eclipse.gmt.gems.model.Wire;
import org.eclipse.ui.views.properties.IPropertyDescriptor;

import java.util.Vector;
import org.eclipse.gmt.gems.model.ConstraintViolation;

import org.eclipse.gmt.gems.model.Container;
import org.eclipse.gmt.gems.model.LogicElement;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;

import org.gems.test.deployment.emf.deployment.*;

public class Root extends org.eclipse.gmt.gems.model.Root  implements Adapter{

	private Object model_;
	private Notifier target_;
	
	
	public Root(){
		
	}
	
	public Root(Object mdl){
		model_ = mdl;
	}
	
	public org.gems.test.deployment.emf.deployment.Root getEMFObject(){
		return getModel();
	}
	
	
	public void setRealRoot(DeploymentPlan n){
		getModel().setRealRoot(n.getEMFObject());
		children.clear();
		List nchildren = n.getChildren();
		for(Object o : nchildren){
			children.add((org.eclipse.gmt.gems.model.ModelObject)o);
		}
		if(realRoot_ != null){
			realRoot_.removePropertyChangeListener(this);
		}
		realRoot_ = n;
		if(realRoot_ != null){
			realRoot_.addPropertyChangeListener(this);
		}
	}
	
	public DeploymentPlan getRealRoot(){
		return (DeploymentPlan)realRoot_;
	}
	
	
	

	
	
    public String getModelID() {
        return DeploymentProvider.MODEL_ID;
    }
    
    public org.gems.test.deployment.emf.deployment.Root getModel(){
    	if(model_ == null){
    		model_ = org.gems.test.deployment.emf.deployment.impl.DeploymentFactoryImpl.eINSTANCE.createRoot();
    		((org.gems.test.deployment.emf.deployment.Root)model_).eAdapters().add(this);	
    	}
    	return (org.gems.test.deployment.emf.deployment.Root)model_;
    }
    	
    	public Notifier getTarget() {
    		return target_;
    	}
    	
    	public void setTarget(Notifier newTarget) {
    		target_ = newTarget;
    	}
    	
    	public boolean isAdapterForType(Object type) {
    		return getModel() == type;
    	}
    
     
    public ModelProvider getModelProvider() {
        ModelProvider provider = super.getModelProvider();
        if(provider == null){
        	provider = new DeploymentProvider();
        	ModelRepository.getInstance().registerModelProvider(provider);
        }
        return provider;
    }
    
    protected void buildContainmentNames() {
       
    }
    
    
    public void addChild(LogicElement child, int index) {
        addChild(child,index,true);
    }
    
     public void addChild(LogicElement child, int index, boolean modifymodel) {
        if(modifymodel){
    	if(child instanceof DeploymentPlan){
    		getModel().getDeploymentPlan().add(((DeploymentPlan)child).getEMFObject());
    	}
    	
    	if(child instanceof Component){
    		getModel().getComponent().add(((Component)child).getEMFObject());
    	}
    	
    	if(child instanceof Node){
    		getModel().getNode().add(((Node)child).getEMFObject());
    	}
    	
    	if(child instanceof NodeResource){
    		getModel().getNodeResource().add(((NodeResource)child).getEMFObject());
    	}
    	
    	if(child instanceof ComponentProperty){
    		getModel().getComponentProperty().add(((ComponentProperty)child).getEMFObject());
    	}
    	
    	
    	}
    	super.addChild(child,index,modifymodel);
    }
    
    public void removeChild(LogicElement child){
     	removeChild(child,true);
    }
    
    public void removeChild(LogicElement child, boolean modifymodel){
    	if(modifymodel){
     	
    	if(child instanceof DeploymentPlan){
    		getModel().getDeploymentPlan().remove(((DeploymentPlan)child).getEMFObject());
    	}
    	
    	if(child instanceof Component){
    		getModel().getComponent().remove(((Component)child).getEMFObject());
    	}
    	
    	if(child instanceof Node){
    		getModel().getNode().remove(((Node)child).getEMFObject());
    	}
    	
    	if(child instanceof NodeResource){
    		getModel().getNodeResource().remove(((NodeResource)child).getEMFObject());
    	}
    	
    	if(child instanceof ComponentProperty){
    		getModel().getComponentProperty().remove(((ComponentProperty)child).getEMFObject());
    	}
    	
    	
    	}
    	super.removeChild(child,modifymodel);
    }
    

	public void addConnection(Wire w) {
	ConnectionType type = w.getConnectionType();
	if(type != null){
	
		if(type.getName().equals(DeploymentConnectionType.NAME)){
			DeploymentConnection con = (DeploymentConnection)w.getAttribute(DeploymentConnectionType.NAME);
			if(con != null){
				getModel().getDeploymentConnection().add(con);
			}
		}
		
	
	}
	}
	public void notifyChanged(Notification notification) {}
	
	public void removeConnection(Wire w) {
	ConnectionType type = w.getConnectionType();
	if(type != null){
	
		if(type.getName().equals(DeploymentConnectionType.NAME)){
			DeploymentConnection con = (DeploymentConnection)w.getAttribute(DeploymentConnectionType.NAME);
			if(con != null){
				getModel().getDeploymentConnection().remove(con);
			}
		}
	
	}
	}
	
	
}

