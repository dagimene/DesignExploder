

/*
 * Created on Fri Sep 17 14:59:59 ART 2010
 *
 * Generated by GEMS 
 */
 
package org.gems.test.deployment.deployment;


import java.util.Hashtable;
import java.util.LinkedList;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmt.gems.model.Container;
import org.eclipse.gmt.gems.model.LinkedModel;
import org.eclipse.gmt.gems.model.ModelObject;
import org.eclipse.gmt.gems.ModelInstance;
import org.eclipse.gmt.gems.ModelRepository;
import org.eclipse.gmt.gems.model.Wire;

public class GemsFactory{
	private Root root_;
	//private LinkedList conns_;
	private Hashtable<Object, ModelObject> parts_ = new Hashtable<Object, ModelObject>();;
	private LinkedList<Wire> wires_ = new LinkedList<Wire>();
	private LinkedList<Runnable> requests_ = new LinkedList<Runnable>();
	private Hashtable connected_ = new Hashtable();
	
	public ModelInstance loadModel(org.gems.test.deployment.emf.deployment.Root root){
		Root groot = load(root);
		ModelInstance inst = ModelRepository.getInstance().getInstanceRepository().getInstance(groot.getModelInstanceID());
		inst.setRoot(groot);
		
		for(Runnable req : requests_)
			req.run();
		
		EList subts = root.getSubtypes();
    	for(Object obj : subts){
    		org.eclipse.gmt.gems.Subtype st = createSubtype((org.gems.test.deployment.emf.deployment.Subtype)obj);
    		inst.addSubType(st);
    	}
    	
    	return inst;
	}
	
	public void checkLinking(LinkedModel model){
		if(model.getModelLinkTarget() != null
		   && model.getModelLinkTarget().trim().length() > 0){
		   model.loadModel();  
		   map(model);
		}
	}
	
	public void map(ModelObject mo){
		if(mo instanceof EMFModelObject){
			EObject obj = ((EMFModelObject)mo).getEMFObject();
			String key = obj.eResource().getURI().toString()+"#"+mo.getID();
			parts_.put(key, mo);
		}
		if(mo instanceof Container){
			Container cont = (Container)mo;
			for(Object o : cont.getChildren()){
				if(o instanceof ModelObject){
					map((ModelObject)o);
				}
			}
		}
	}
	
	public Root load(org.gems.test.deployment.emf.deployment.Root root){
		Root groot = new Root(root);
		//root_ = groot;
		//conns_ = new LinkedList();
		//wires_ = new LinkedList<Wire>();
		//parts_ = new Hashtable<Object, ModelObject>();
		
		parts_.put(root,groot);
		
		
		org.gems.test.deployment.emf.deployment.DeploymentPlan rrm = root.getRealRoot();
		if(rrm != null){
			DeploymentPlan rr = (DeploymentPlan)getPart(groot, rrm);
			groot.setRealRoot(rr);			
		}
		
		
		
    	EList deploymentplan = root.getDeploymentPlan();
    	for(Object obj : deploymentplan){
    		getPart(groot,obj);
    	}
    	
    	
    	EList component = root.getComponent();
    	for(Object obj : component){
    		getPart(groot,obj);
    	}
    	
    	
    	EList node = root.getNode();
    	for(Object obj : node){
    		getPart(groot,obj);
    	}
    	
    	
    	EList noderesource = root.getNodeResource();
    	for(Object obj : noderesource){
    		getPart(groot,obj);
    	}
    	
    	
    	EList componentproperty = root.getComponentProperty();
    	for(Object obj : componentproperty){
    		getPart(groot,obj);
    	}
    	
    	
    	EList deploymentcons = root.getDeploymentConnection();
    	for(Object obj : deploymentcons){
    		createDeploymentConnection(groot, (org.gems.test.deployment.emf.deployment.DeploymentConnection)obj);
    	} 
    	
    	
    	
    	
    	return groot;
	}
    
    public ModelObject load(Container root, Object child) {
    	if(child instanceof org.gems.test.deployment.emf.deployment.DeploymentPlan){
    		return loadDeploymentPlan(root,(org.gems.test.deployment.emf.deployment.DeploymentPlan)child);
    	}
    	
    	if(child instanceof org.gems.test.deployment.emf.deployment.Component){
    		return loadComponent(root,(org.gems.test.deployment.emf.deployment.Component)child);
    	}
    	
    	if(child instanceof org.gems.test.deployment.emf.deployment.Node){
    		return loadNode(root,(org.gems.test.deployment.emf.deployment.Node)child);
    	}
    	
    	if(child instanceof org.gems.test.deployment.emf.deployment.NodeResource){
    		return loadNodeResource(root,(org.gems.test.deployment.emf.deployment.NodeResource)child);
    	}
    	
    	if(child instanceof org.gems.test.deployment.emf.deployment.ComponentProperty){
    		return loadComponentProperty(root,(org.gems.test.deployment.emf.deployment.ComponentProperty)child);
    	}
    	
    	return null;
    }
    
    	public DeploymentPlan loadDeploymentPlan(Container root, org.gems.test.deployment.emf.deployment.DeploymentPlan obj){
    	   DeploymentPlan gobj = null;
    	   
    	   gobj = new DeploymentPlan(obj);  
    	   
    	   loadDeploymentPlan(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Component loadComponent(Container root, org.gems.test.deployment.emf.deployment.Component obj){
    	   Component gobj = null;
    	   
    	   gobj = new Component(obj);  
    	   
    	   loadComponent(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Node loadNode(Container root, org.gems.test.deployment.emf.deployment.Node obj){
    	   Node gobj = null;
    	   
    	   gobj = new Node(obj);  
    	   
    	   loadNode(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public NodeResource loadNodeResource(Container root, org.gems.test.deployment.emf.deployment.NodeResource obj){
    	   NodeResource gobj = null;
    	   
    	   gobj = new NodeResource(obj);  
    	   
    	   loadNodeResource(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public ComponentProperty loadComponentProperty(Container root, org.gems.test.deployment.emf.deployment.ComponentProperty obj){
    	   ComponentProperty gobj = null;
    	   
    	   gobj = new ComponentProperty(obj);  
    	   
    	   loadComponentProperty(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
   	
   	 
    	public DeploymentPlan loadDeploymentPlan(Container root, org.gems.test.deployment.emf.deployment.DeploymentPlan obj, DeploymentPlan gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    		EList components = obj.getComponents();
    		for(Object child : components){
    			loadComponent(gobj,(org.gems.test.deployment.emf.deployment.Component)child);
    		}
    	   
    		EList nodes = obj.getNodes();
    		for(Object child : nodes){
    			loadNode(gobj,(org.gems.test.deployment.emf.deployment.Node)child);
    		}
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public Component loadComponent(Container root, org.gems.test.deployment.emf.deployment.Component obj, Component gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    		EList componentpropertys = obj.getCProperties();
    		for(Object child : componentpropertys){
    			loadComponentProperty(gobj,(org.gems.test.deployment.emf.deployment.ComponentProperty)child);
    		}
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   addDeferredRequest(new ComponentConnector(root,obj,gobj));
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public class ComponentConnector implements Runnable {
    	  private Container root_;
    	  private org.gems.test.deployment.emf.deployment.Component obj_;
    	  private Component gobj_;
    	  
    	  public ComponentConnector(Container root, org.gems.test.deployment.emf.deployment.Component obj, Component gobj){
    	    root_ = root;
    	    obj_ = obj;
    	    gobj_ = gobj;
    	  }
    	  public void run(){
    		loadConnections(root_,obj_,gobj_);
    	  }
    	}
    	
    	public void loadConnections(Container root, org.gems.test.deployment.emf.deployment.Component obj, Component gobj){
    	
    	   
    	   
    	 }
    	
   	
    	public Node loadNode(Container root, org.gems.test.deployment.emf.deployment.Node obj, Node gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    		EList noderesources = obj.getResourceOf();
    		for(Object child : noderesources){
    			loadNodeResource(gobj,(org.gems.test.deployment.emf.deployment.NodeResource)child);
    		}
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   addDeferredRequest(new NodeConnector(root,obj,gobj));
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public class NodeConnector implements Runnable {
    	  private Container root_;
    	  private org.gems.test.deployment.emf.deployment.Node obj_;
    	  private Node gobj_;
    	  
    	  public NodeConnector(Container root, org.gems.test.deployment.emf.deployment.Node obj, Node gobj){
    	    root_ = root;
    	    obj_ = obj;
    	    gobj_ = gobj;
    	  }
    	  public void run(){
    		loadConnections(root_,obj_,gobj_);
    	  }
    	}
    	
    	public void loadConnections(Container root, org.gems.test.deployment.emf.deployment.Node obj, Node gobj){
    	
    	   
    	   
    	 }
    	
   	
    	public NodeResource loadNodeResource(Container root, org.gems.test.deployment.emf.deployment.NodeResource obj, NodeResource gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public ComponentProperty loadComponentProperty(Container root, org.gems.test.deployment.emf.deployment.ComponentProperty obj, ComponentProperty gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
   	
   	public org.eclipse.gmt.gems.Subtype createSubtype(org.gems.test.deployment.emf.deployment.Subtype subt){
   		ModelObject base = parts_.get(subt.getBase());
   		String name = subt.getName();
   		EMFSubtypeImpl esub = new EMFSubtypeImpl(base,subt,name);
   		for(Object obj : subt.getInstances()){
   			esub.addInstance(parts_.get(obj),false);
   		}
   		
 
		for(Object lo : subt.getLinks()){
		   org.gems.test.deployment.emf.deployment.SubtypeLink link = (org.gems.test.deployment.emf.deployment.SubtypeLink)lo;
		   esub.createUpdater(parts_.get(link.getBase()),parts_.get(link.getInstance()),link);   
		}
   		return esub;
   	}
   
    public void createDeploymentConnection(Container root, org.gems.test.deployment.emf.deployment.DeploymentConnection con){
        if(con.getSource() == null || con.getTarget() ==  null)
           return;
    	ModelObject src = parts_.get(con.getSource());
    	ModelObject trg = parts_.get(con.getTarget());
    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::DeploymentConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	EMFDeploymentProxy proxy = new EMFDeploymentProxy(con);
    	w.setConnectionType(DeploymentConnectionType.INSTANCE, false);
    	DeploymentConnectionType.INSTANCE.installAttributes(w,proxy);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::DeploymentConnection",Boolean.TRUE);
    }
    
    public void createDeploymentConnection(Container root, ModelObject src, ModelObject trg){

    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::DeploymentConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	w.setConnectionType(DeploymentConnectionType.INSTANCE, false);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::DeploymentConnection",Boolean.TRUE);
    }
    
    public ModelObject getPart(Container root, Object key){
		return getPart(root,key,true);
	}
	
	public ModelObject getPart(Object key){
		return getPart(null,key,true);
	}
	
	public boolean isContainedOrLinked(Container root, ModelObject curr){
    	return root.firstCommonParent(curr) != null;
    }
	
	public ModelObject getPart(Container root, Object key, boolean load){
		ModelObject part = parts_.get(key);
		if(part == null && key instanceof org.gems.test.deployment.emf.deployment.ModelObject && key != null){
		    org.gems.test.deployment.emf.deployment.ModelObject obj = (org.gems.test.deployment.emf.deployment.ModelObject)key;
		    if(obj.eResource() != null)
		   	   part = parts_.get(obj.eResource().getURI().toString()+"#"+obj.getId());
		}
		if(part == null && load){
			part = load(root,key);
		}
		return part;
	}
	
	public void addDeferredRequest(Runnable request){
		requests_.add(request);
	}
}

